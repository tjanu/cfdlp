--------------------------------------------------------
Author : Aren Jensen 
http://www.clsp.jhu.edu/~ajansen/
aren@jhu.edu

Copyright 2010 by Johns Hopkins University
http://www.jhu.edu

--------------------------------------------------------
Dependencies

This software needs the fftw 3.2.2 package
http://www.fftw.org/download.html

Modify the Makefile to point to the fftw installation directory

--------------------------------------------------------
Generating FDPLP Short-term Features

Options -

* Input waveform file
-i <file_name> - name of the input raw (header-less) little-endian acoustic file

* Output feature file 
-o <file_name> - name of the output 39 dimensional [13 cepstral (C0 + 12 cepstral features)   + delta + ddelta features] FDPLP feature file. The output is also in raw (header-less) little-endian format

* Spectral features are generated by setting the -spec flag 
-spec 1 generates 39D short-term spectral features

* Gain normalization - set using the -gn flag
-gn 1 enables gain normalization (Default - useful in reverberant/noisy environments)
-gn 0 turns off gain normalization

* Sampling rate - set using the -sr flag
-sr 8000 specifies the sampling rate to be 8000 Hz (Default)
-sr 16000 specifies the sampling rate to be 16000 Hz

* Frequenecy warping scale - set using the -axis flag
-axis bark uses a bark scale while computing sub-band energies (Default)
-axis mel uses a mel wrapping 

-----------
Additions/Modifications by Thomas Janu <tjanu1@jhu.edu>

-axis linear-mel uses a linear scale for computing the sub-band energies and
	warps the final fdplp spectrum to mel scale before computing the final feature
        vectors
-axis linear-bark is like linear-mel, but warps the spectrum to bark scale
  - both only work for short-term spectral features (-spec 1 necessary)

-limit-range 1 limits the DCT spectrum to 125-3800Hz before computing the
	FDPLP spectrum (which is done by e.g. IBM's MFCC calculator)
-limit-range 0 leaves the DCT spectrum as-is (default)
-apply-wiener 1 enables a simple VAD algorithm (energy-based) that is needed to
	apply a wiener filter on the power spectrum of the band-limited DCT spectrum
	used to obtain the autocorrelation coefficients needed for the LPC (so, the
	wiener filter is applied per band). The Wiener filter applied at this
	stage estimates the clean signal from the noisy signal in additive noise
	scenarios.
-apply-wiener 0 disables the VAD and the Wiener filter (default)
-vadfile <file_name> - read in the VAD information from this file instead of
        performing ad-hoc energy-based VAD. One char per frame, no newlines!
-speechchar <char> - if -vadfile is given, this character represents a speech
	frame
-nonspeechchar <char> - if -vadfile is given, this char represents nonspeech
-vad-grace <int> - the vadfile may have up to <vad-grace> frames more or less
	than are actually in the file
-fdplpwin <sec> sets the length of the fdplp window to <sec> seconds, defaults
	to 5. In reverberant environments with long enough files, 10 is a useful
	value.
-truncate-last 0 is the default behaviour, not truncating the last frame to the
	number of actual signal values (but zero-padding the signal to fill the whole
	window).
-truncate-last 1 truncates the last frame to the number of actual signal values.
	Seriously speeds up the computation for short files (but also changes
	the generated feature numbers significantly)
-skip-bands <int> specify how many bands to skip (starting at lowest frequencies), default: 0.
	Useful for band-limited data (like telephone audio --> good value is to skip 2 bands
	with the linear-* frequency mappings)
-feat	new name for -spec
-nceps <int> specifiy the number of cepstral coefficients to keep
-shortterm-mode <int> define how to construct one feature vector for shortterm
	features:
	    0: only cepstral coefficients
	    1: 0 + first order derivatives
	    2: 0 + second order derivatives
	    3: 0 + first and second order derivatives
-modulation-mode <int> - define how to construct one feature vector for
         modulation features:
	    0: only statically compressed modulation cepstrum
	    1: only dynamically compressed modulation cepstrum
	    2: statically and dynamically compressed modulation cepstra
-downsampling-factor <int> : downsample the envelopes by a factor given here.
	    (fdlp_fast uses 20 here)
-downsampling-sr <int> : give the target sample rate for the downsampling
         directly. for fdlp_fast and 8kHz data, this would be 400Hz. If
         -downsampling-sr and -downsampling-factor are given, the latter supercedes
	 the former.
-max-threads <int> - if pthreads is available on the system at build time, limit
	the number of threads to use. default is 1 (single-threaded), -1 means "as many
	threads as there are bands to calculate" (be careful when using linear
	decomposition)

----------

Example -
./cfdlp -i mgak0_sx406.raw -gn 1 -spec 1 -axis mel -o mgak0_sx406.fdlp -sr 16000

Input 
-i mgak0_sx406.raw - headerless raw waveform in little-endian format

Flags - 
-gn 1 -- Gain normalization turned on
-spec 1 -- Generates 39D features
-axis mel -- Uses a mel frequency warping
-sr 16000 -- Sets the sampling rate to 16kHz

Output
-o mgak0_sx406.fdlp - raw headerless file in little-endian format
